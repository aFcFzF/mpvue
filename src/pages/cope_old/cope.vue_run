<template>
  <div class="cope-page">
    <div class="lice-pic">
      <canvas
          canvas-id="__mpvue_cropper__"
          @touchstart="touchstart"
          @touchmove="touchmove"
          @touchend="touchend"
          disable-scroll
          :style="{ width: option.width + 'px', height: option.height + 'px', background: 'rgba(0, 0, 0, .8)' }">
      </canvas>
    </div>
  </div>
</template>

<script>
  import WeCropper from 'we-cropper'
  /*eslint-disable*/
  const CANVAS_ID = '__mpvue_cropper__'
  const device = wx.getSystemInfoSync() // 获取设备信息
  const width = device.windowWidth // 示例为一个与屏幕等宽的正方形裁剪框
  const height = device.windowHeight - 80
  export default {
    name: 'mpvue-cropper',
    data () {
      return {
        _we_cropper: null,
        option: {
          id: 'cropper0011',
          width: 300,
          height: 400,
          scale: 2.5,
          zoom: 8,
          cut: {
            x: 0,
            y: 0,
            width: 300,
            height: 300
          }
        }
      }
    },
    computed: {
      _width () {
        return this.option.width
      },
      _height () {
        return this.option.height
      }
    },
    methods: {
      touchstart ($event) {
        this._we_cropper.touchStart($event.mp)
      },
      touchmove ($event) {
        this._we_cropper.touchMove($event.mp)
      },
      touchend ($event) {
        this._we_cropper.touchEnd($event.mp)
      },
      pushOrigin (src) {
        this._we_cropper.pushOrign(src)
      },
      updateCanvas () {
        this._we_cropper.updateCanvas()
      },
      getCropperBase64 () {
        return new Promise((resolve, reject) => {
          this._we_cropper.getCropperImage(src => {
            src ? resolve(src) : reject()
          })
        })
      },
      getCropperImage () {
        return new Promise((resolve, reject) => {
          this._we_cropper.getCropperImage(src => {
            src ? resolve(src) : reject()
          })
        })
      }
    },
    mounted () {

      this._we_cropper = new WeCropper(Object.assign(this.option, {
        id: CANVAS_ID
      }))
      .on('ready', (...args) => {
        this.$emit('ready', ...args)
      })
      .on('beforeImageLoad', (...args) => {
        this.$emit('beforeImageLoad', ...args)
      })
      .on('imageLoad', (...args) => {
        this.$emit('imageLoad', ...args)
      })
      .on('beforeDraw', (...args) => {
        this.$emit('beforeDraw', ...args)
      })
      .updateCanvas()
      // const cropper = this.cropper = getComponentByTag(this, 'mpvue-cropper')
      const query = this.$root.$mp.query
      // this.imgSrc = query.file
      this._we_cropper.pushOrign(query.file)
    }
  }
</script>